// @Author: Alaa Al-Jarrah

timestamps {

node () {

//wrap([$class: 'Xvfb']) {
	stage ('Kafka_APIs_Operator_Deployment - Checkout') {
 	 checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'jenkins-token', url: 'https://github.com/alaajarrah/Kafka_APIs_Operator_Deployment.git']]])
	}
	stage ('Kafka_APIs_Operator_Deployment - Build') {
 	
sh label: '', script: '''#!/bin/sh

cd /Users/alaaal-jarrah/Downloads/Customers/Arabbank/Cloud_Paks_PoC/CP4I/Artifacts
chmod 777 *

echo 'Workspace is ' + ${WORKSPACE}

cp AB.Middleware.ABSPARK.Channels.Customer.Inquiry.Services_11Aug2020_143527.bar /Users/alaaal-jarrah/.jenkins/workspace/${JOB_NAME}/
cp AB.Middleware.ABSPARK.Channels.MW.AAA.Services.V01_03012019_0830.bar /Users/alaaal-jarrah/.jenkins/workspace/${JOB_NAME}/
cp AB.Middleware.ABSPARK.Common.Applications.AuditLoggerDatabase.Flows_27Jan2019_115437_50AddInst.bar /Users/alaaal-jarrah/.jenkins/workspace/${JOB_NAME}/
cp AB.Middleware.ABSPARK.Common.Applications.AuditLoggerKibana.Flows_25062020_1711.bar /Users/alaaal-jarrah/.jenkins/workspace/${JOB_NAME}/
cp AB.Middleware.ABSPARK.Common.Applications.AuditLoggerRouting.Flows_22Dec2019_132030.bar /Users/alaaal-jarrah/.jenkins/workspace/${JOB_NAME}/
cp AB.Middleware.ABSPARK.Services.Business.Flows.MW.AuthToken.Validate.V01_06012019_1130.bar /Users/alaaal-jarrah/.jenkins/workspace/${JOB_NAME}/
cp L0_ABIR808_27122017.bar /Users/alaaal-jarrah/.jenkins/workspace/${JOB_NAME}/
cp L1_BlacklistValidation.bar /Users/alaaal-jarrah/.jenkins/workspace/${JOB_NAME}/
cp MQPolicy.bar /Users/alaaal-jarrah/.jenkins/workspace/${JOB_NAME}/

cd /Users/alaaal-jarrah/Downloads/openshift-origin-client-tools-v3
./oc login --token=${OCP_TOKEN} --server=${OCP_API_URL}
./oc project ${Namespace}

docker login ${OCP_Registry_External_URL} -u $(./oc whoami) -p $(./oc whoami -t)

cd ${WORKSPACE}
pwd

docker build -t ${imagename}:${BUILD_NUMBER} --no-cache .
docker tag ${imagename}:${BUILD_NUMBER} ${OCP_Registry_External_URL}/${Namespace}/${imagename}:${tag}
docker push ${OCP_Registry_External_URL}/${Namespace}/${imagename}:${tag}


#Create the IntegrationServer Configurations from CR yamls
chmod -R 777 ConfigurationInputs
chmod -R 777 ConfigurationResources

# Create CR for setdbparms
setdbparms=$(base64 -b 0 ConfigurationInputs/setdbparms.txt) 
sed -e "s/replace-with-namespace/${Namespace}/" -e "s~replace-with-setdbparms-bas64~${setdbparms}~" ConfigurationResources/setdbparms.yaml > setdbparms-temp.yaml 
# Create CR for KeyStore
keystore=$(base64 -b 0 ConfigurationInputs/ace-keystore)
sed -e "s/replace-with-namespace/${Namespace}/" -e "s~replace-with-keystore-bas64~${keystore}~" ConfigurationResources/keystore.yaml > keystore-temp.yaml 
# Create CR for TrustStore
truststore=$(base64 -b 0 ConfigurationInputs/es-cert.p12)
sed -e "s/replace-with-namespace/${Namespace}/" -e "s~replace-with-truststore-bas64~${truststore}~" ConfigurationResources/truststore.yaml > truststore-temp.yaml 
# Create CR for the policy project
policy=$(base64 -b 0 ConfigurationInputs/CP4IPolicyProject.zip)
sed -e "s/replace-with-namespace/${Namespace}/" -e "s~replace-with-policy-base64~${policy}~" ConfigurationResources/policyProject.yaml > policyProject-temp.yaml 
# Create CR for server configuration
serverconf=$(base64 -b 0 ConfigurationInputs/server.conf.yaml)
sed -e "s/replace-with-namespace/${Namespace}/" -e "s~replace-with-serverconf-bas64~${serverconf}~" ConfigurationResources/server.conf.yaml > server.conf-temp.yaml 
# Deploy the Integration Server
sed -e "s/replaceIntServerName/${IntegrationServer}/" -e "s/replaceNamespace/${Namespace}/" -e "s/replaceWithBakedImage/${imagename}:${tag}/" Kafka_APIs_IS.yaml > Kafka_APIs-temp.yaml

cd /Users/alaaal-jarrah/Downloads/openshift-origin-client-tools-v3

if test ${DeploymentType} = \'install\'; then
./oc apply -f ${WORKSPACE}/setdbparms-temp.yaml 
./oc apply -f ${WORKSPACE}/keystore-temp.yaml
./oc apply -f ${WORKSPACE}/truststore-temp.yaml
./oc apply -f ${WORKSPACE}/policyProject-temp.yaml
./oc apply -f ${WORKSPACE}/server.conf-temp.yaml 
./oc apply -f ${WORKSPACE}/Kafka_APIs-temp.yaml
else
./oc replace -f ${WORKSPACE}/setdbparms-temp.yaml
./oc replace -f ${WORKSPACE}/keystore-temp.yaml
./oc replace -f ${WORKSPACE}/truststore-temp.yaml
./oc replace -f ${WORKSPACE}/policyProject-temp.yaml
./oc replace -f ${WORKSPACE}/server.conf-temp.yaml 
./oc replace -f ${WORKSPACE}/Kafka_APIs-temp.yaml
fi
'''
}
//}
cleanWs()
}
}
